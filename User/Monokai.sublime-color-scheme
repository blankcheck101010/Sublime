{
    "name": "Monokai",
    "author": "Sublime HQ Pty Ltd, Wimer Hazenberg",
    "variables":
    {
        "black": "hsl(0, 0%, 0%)",
        "black2": "hsl(60, 17%, 11%)",
        "black3": "hsl(0, 0%, 13%)",//
        "blue": "hsl(190, 81%, 67%)",
        "grey": "hsl(0, 0%, 38%)",
        "grey2": "hsl(0, 0%, 54%)",//
        "orange": "hsl(32, 98%, 56%)",
        "orange2": "hsl(30, 83%, 34%)",
        "orange3": "hsl(55, 94%, 54%)",//
        "purple": "hsl(261, 100%, 75%)",
        "red": "hsl(0, 93%, 59%)",
        "red2": "hsl(338, 95%, 56%)",
        "white": "hsl(0, 0%, 97%)",
        "white2": "hsl(60, 36%, 96%)",
        "white3": "hsl(0, 0%, 94%)",//
        "white4": "hsl(206, 11%, 45%)",//
        "yellow": "hsl(54, 70%, 68%)",
        "yellow2": "hsl(80, 76%, 53%)",
        "yellow3": "hsl(60, 12%, 79%)",
        "yellow4": "hsl(55, 11%, 22%)",
        "yellow5": "hsl(50, 11%, 41%)"
    },
    "globals":
    {
        "foreground": "var(white3)",
        "background": "var(black3)",
        "caret": "var(white2)",
        "invisibles": "color(var(white4))",
        "line_highlight": "color(var(black) alpha(0.3))",
        "selection": "color(var(grey) alpha(0.4))",
        "selection_border": "var(black2)",
        "misspelling": "var(red2)",
        "active_guide": "color(var(orange2) alpha(0.69))",
        "find_highlight_foreground": "var(black)",
        "find_highlight": "var(orange3)",
        "brackets_options": "underline",
        "brackets_foreground": "color(var(white3) alpha(0.65))",
        "bracket_contents_options": "underline",
        "bracket_contents_foreground": "color(var(white3) alpha(0.65))",
        "tags_options": "stippled_underline"
    },
    "rules":
    [
        {
            "name": "Comment",
            "scope": "comment",
            "foreground": "color(var(grey2) alpha(0.69))"
        },
        {
            "name": "String",
            "scope": "string",
            "foreground": "var(yellow)"
        },
        {
            "name": "Number",
            "scope": "constant.numeric",
            "foreground": "color(var(purple) alpha(0.53))"
        },
        {
            "name": "Built-in constant",
            "scope": "constant.language",
            "foreground": "color(var(purple) alpha(0.53))"
        },
        {
            "name": "User-defined constant",
            "scope": "constant.character, constant.other",
            "foreground": "color(var(purple) alpha(0.53))"
        },
        {
            "name": "Variable",
            "scope": "variable"
        },
        {
            "name": "Keyword",
            "scope": "keyword - (source.c keyword.operator | source.c++ keyword.operator | source.objc keyword.operator | source.objc++ keyword.operator), keyword.operator.word",
            "foreground": "var(red2)"
        },
        {
            "name": "Annotation Punctuation",
            "scope": "punctuation.definition.annotation",
            "foreground": "var(red2)"
        },
        {
            "name": "JavaScript Dollar",
            "scope": "variable.other.dollar.only.js",
            "foreground": "var(red2)"
        },
        {
            "name": "Storage",
            "scope": "storage",
            "foreground": "var(red2)"
        },
        {
            "name": "Storage type",
            "scope": "storage.type",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "Entity name",
            "scope": "entity.name - (entity.name.filename | entity.name.section | entity.name.tag | entity.name.label)",
            "foreground": "var(yellow2)"
        },
        {
            "name": "PreProcessor Entity name",
            "scope": "entity.name.function.preprocessor",
            "foreground": "var(yellow)"
        },
        {
            "name": "Inherited class",
            "scope": "entity.other.inherited-class",
            "foreground": "var(yellow2)",
            "font_style": "italic underline"
        },
        {
            "name": "Function argument",
            "scope": "variable.parameter - (source.c | source.c++ | source.objc | source.objc++)",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Language variable",
            "scope": "variable.language",
            "foreground": "var(orange)",
            "font_style": "italic"
        },
        {
            "name": "Tag name",
            "scope": "entity.name.tag",
            "foreground": "var(red2)"
        },
        {
            "name": "Tag attribute",
            "scope": "entity.other.attribute-name",
            "foreground": "var(yellow2)"
        },
        {
            "name": "Function call",
            "scope": "variable.function, variable.annotation",
            "foreground": "var(blue)"
        },
        {
            "name": "Library function",
            "scope": "support.function, support.macro",
            "foreground": "var(blue)"
        },
        {
            "name": "Library constant",
            "scope": "support.constant",
            "foreground": "var(blue)"
        },
        {
            "name": "Library class/type",
            "scope": "support.type, support.class",
            "foreground": "var(blue)",
            "font_style": "italic"
        },
        {
            "name": "Library variable",
            "scope": "support.other.variable"
        },
        {
            "name": "Invalid",
            "scope": "invalid",
            "foreground": "var(white2)",
            "background": "color(var(red2) alpha(.30))"
        },
        {
            "name": "Invalid deprecated",
            "scope": "invalid.deprecated",
            "foreground": "var(white2)",
            "background": "color(var(purple) alpha(0.20))"
        },
        {
            "name": "JSON String",
            "scope": "meta.structure.dictionary.json string.quoted.double.json",
            "foreground": "var(yellow3)"
        },
        {
            "name": "YAML String",
            "scope": "string.unquoted.yaml",
            "foreground": "var(white3)"
        },
        {
            "name": "diff.header",
            "scope": "meta.diff, meta.diff.header",
            "foreground": "var(yellow5)"
        },
        {
            "name": "markup headings",
            "scope": "markup.heading",
            "font_style": "bold"
        },
        {
            "name": "markup headings",
            "scope": "markup.heading punctuation.definition.heading",
            "foreground": "var(orange)"
        },
        {
            "name": "markup h1",
            "scope": "markup.heading.1 punctuation.definition.heading",
            "foreground": "var(red2)"
        },
        {
            "name": "markup links",
            "scope": "markup.underline.link",
            "foreground": "var(blue)"
        },
        {
            "name": "markup bold",
            "scope": "markup.bold",
            "font_style": "bold"
        },
        {
            "name": "markup italic",
            "scope": "markup.italic",
            "font_style": "italic"
        },
        {
            "name": "markup bold/italic",
            "scope": "markup.italic markup.bold | markup.bold markup.italic",
            "font_style": "bold italic"
        },
        {
            "name": "markup hr",
            "scope": "punctuation.definition.thematic-break",
            "foreground": "var(yellow5)"
        },
        {
            "name": "markup blockquote",
            "scope": "markup.quote punctuation.definition.blockquote",
            "foreground": "var(yellow5)"
        },
        {
            "name": "markup bullets",
            "scope": "markup.list.numbered.bullet",
            "foreground": "color(var(purple) alpha(0.53))"
        },
        {
            "name": "markup bullets",
            "scope": "markup.list.unnumbered.bullet | (markup.list.numbered punctuation.definition)",
            "foreground": "color(var(white) alpha(0.67))"
        },
        {
            "name": "markup code",
            "scope": "markup.raw",
            "background": "color(var(white) alpha(0.094))"
        },
        {
            "name": "markup punctuation",
            "scope": "markup.raw punctuation.definition.raw",
            "foreground": "color(var(white) alpha(0.67))"
        },
        {
            "name": "markup punctuation",
            "scope": "text & (punctuation.definition.italic | punctuation.definition.bold | punctuation.definition.raw | punctuation.definition.link | punctuation.definition.metadata | punctuation.definition.image | punctuation.separator.table-cell | punctuation.section.table-header | punctuation.definition.constant)",
            "foreground": "color(var(white) alpha(0.67))"
        },
        {
            "name": "diff.deleted",
            "scope": "markup.deleted",
            "foreground": "var(red2)"
        },
        {
            "name": "diff.inserted",
            "scope": "markup.inserted",
            "foreground": "var(yellow2)"
        },
        {
            "name": "diff.changed",
            "scope": "markup.changed",
            "foreground": "var(yellow)"
        },
        {
            "scope": "constant.numeric.line-number.find-in-files - match",
            "foreground": "color(var(purple) alpha(0.53))"
        },
        {
            "scope": "entity.name.filename",
            "foreground": "var(yellow)"
        },
        {
            "scope": "message.error",
            "foreground": "var(red)"
        },
        {
            "scope": "meta.preprocessor.macro.c | meta.preprocessor.c",
            "foreground": "var(yellow)"
        },
        {
            "scope": "semi_colon.eol.ccpp",
            "foreground": "var(red2)"
        },
        {
            "name": "NameSpace",
            "scope": "keyword.control.c++",
            "foreground": "var(orange)"
        },
        {
            "name": "ifndef for .h files",
            "scope": "keyword.control.import.define.c | keyword.control.import.error.c | keyword.control.import.include.c | keyword.control.import.c",
            "foreground": "var(yellow)"
        },
        {
            "scope": "keyword.control.import.pragma.c | keyword.control.import.if.c | keyword.control.import.endif.c | keyword.control.import.else.c",
            "foreground": "var(yellow)"
        },
        {
            "scope": "keyword.operator.cpp",
            "foreground": "var(red2)"
        },
        {
            "scope": "keyword.operator.arithmetic.ccpp",
            "foreground": "var(red2)"
        },
        {
            "scope": "keyword.operator.comparison.ccpp",
            "foreground": "var(red2)"
        },
        {
            "scope": "keyword.operator.bitwise.ccpp",
            "foreground": "var(red2)"
        },

        {
            "scope": "keyword.operator.pointer.ccp",
            "foreground": "var(red2)"
        },
        {
            "scope": "keyword.operator.address.ccp",
            "foreground": "var(red2)"
        },
        {
            "scope": "keyword.operator.cast.c++",
            "foreground": "var(red2)"
        },



        // {
            // "scope": "source.c++",
            // "scope": "keyword.control.c++",
            // "scope": "storage.modifier.c++",
            // "scope": "variable.language.c++",
            // "scope": "variable.other.readwrite.member.c++",
            // "scope": "constant.language.c++",
            // "scope": "keyword.operator.word.c++",
            // "scope": "storage.type.c++",
            // "scope": "string.quoted.double.c++",
            // "scope": "punctuation.definition.string.end.c++",
            // "scope": "constant.numeric.c++",
            // "scope": "punctuation.section.block.begin.c++",
            // "scope": "meta.extern-c.c++",
            // "scope": "meta.preprocessor.c++",
            // "scope": "punctuation.section.block.end.c++",
            // "scope": "keyword.operator.comparison.c",
            // "scope": "punctuation.separator.c++",
            // "scope": "invalid.illegal.stray-bracket-end.c++",
            // "scope": "punctuation.terminator.c++",
            // "scope": "meta.group.c++",
            // "scope": "meta.group.c++ punctuation.section.group.end.c++",
            // "scope": "meta.attribute.c++",
            // "scope": "variable.parameter.c++",
            // "scope": "keyword.operator.assignment.c++",
            // "scope": "constant.other.c++",
            // "scope": "keyword.operator.word.cast.c++",
            // "scope": "punctuation.section.generic.end.c++",
            // "scope": "punctuation.section.generic.begin.c++",
            // "scope": "meta.namespace.c++",
            // "scope": "meta.namespace.c++ entity.name.namespace.c++",
            // "scope": "keyword.operator.alias.c++",
            // "scope": "meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "meta.block.c++",
            // "scope": "storage.type.template.c++",
            // "scope": "meta.template.c++",
            // "scope": "meta.template.c++ punctuation.section.generic.end.c++",
            // "scope": "keyword.operator.variadic.c++",
            // "scope": "meta.function-call.c++",
            // "scope": "meta.group.c++ punctuation.section.group.begin.c++",
            // "scope": "variable.function.c++",
            // "scope": "meta.function-call.c++ meta.group.c++",
            // "scope": "meta.function-call.c++ meta.group.c++ punctuation.section.group.end.c++",
            // "scope": "meta.method-call.c++ meta.group.c++",
            // "scope": "meta.method-call.c++ meta.group.c++ punctuation.section.group.end.c++",
            // "scope": "meta.method-call.c++ storage.type.template.c++",
            // "scope": "meta.method-call.c++",
            // "scope": "variable.function.member.c++",
            // "scope": "punctuation.section.group.begin.c++",
            // "scope": "punctuation.accessor.dot.c++",
            // "scope": "punctuation.accessor.arrow.c++",
            // "scope": "punctuation.section.group.end.c++",
            // "scope": "punctuation.section.brackets.begin.c++",
            // "scope": "meta.brackets.c++",
            // "scope": "punctuation.section.brackets.end.c++",
            // "scope": "keyword.operator.c++",
            // "scope": "meta.function.c++ entity.name.function.constructor.c++",
            // "scope": "meta.function.c++ entity.name.function.destructor.c++",
            // "scope": "meta.function.c++ entity.name.function.c++",
            // "scope": "punctuation.accessor.c++",
            // "scope": "entity.name.function.c++",
            // "scope": "meta.function.c++",
            // "scope": "meta.function.parameters.c++ meta.group.c++ punctuation.section.group.begin.c++",
            // "scope": "meta.function.parameters.c++ meta.group.c++",
            // "scope": "meta.function.c++ meta.block.c++",
            // "scope": "meta.function.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "meta.class.c++",
            // "scope": "entity.name.class.forward-decl.c++",
            // "scope": "entity.name.class.c++",
            // "scope": "meta.block.c++ punctuation.section.block.begin.c++",
            // "scope": "meta.class.c++ meta.block.c++",
            // "scope": "meta.class.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "meta.struct.c++",
            // "scope": "entity.name.struct.forward-decl.c++",
            // "scope": "entity.name.struct.c++",
            // "scope": "meta.struct.c++ meta.block.c++",
            // "scope": "meta.struct.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "meta.enum.c++",
            // "scope": "entity.name.enum.forward-decl.c++",
            // "scope": "entity.name.enum.c++",
            // "scope": "meta.enum.c++ meta.block.c++",
            // "scope": "meta.enum.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "meta.union.c++",
            // "scope": "entity.name.union.forward-decl.c++",
            // "scope": "entity.name.union.c++",
            // "scope": "meta.union.c++ meta.block.c++",
            // "scope": "meta.union.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "entity.other.inherited-class.c++",
            // "scope": "meta.static-assert.c++ keyword.operator.word.c++",
            // "scope": "meta.method.destructor.c++ entity.name.function.destructor.c++",
            // "scope": "meta.method.constructor.c++ entity.name.function.constructor.c++",
            // "scope": "meta.method.c++ entity.name.function.c++",
            // "scope": "meta.method.c++",
            // "scope": "meta.method.parameters.c++ meta.group.c++ punctuation.section.group.begin.c++",
            // "scope": "meta.method.parameters.c++ meta.group.c++",
            // "scope": "punctuation.separator.initializer-list.c++",
            // "scope": "meta.method.constructor.initializer-list.c++",
            // "scope": "meta.method.c++ meta.block.c++",
            // "scope": "meta.method.c++ meta.block.c++ punctuation.section.block.end.c++",
            // "scope": "comment.block.preprocessor.if-branch.c++",
            // "scope": "comment.block.preprocessor.else-branch.c++",
            // "scope": "meta.preprocessor.macro.c++",
            // "scope": "entity.name.function.preprocessor.c++",
            // "scope": "entity.name.constant.preprocessor.c++",
            // "scope": "meta.preprocessor.macro.parameters.c++ meta.group.c++",
            // "scope": "comment.block.c++",
            // "scope": "invalid.illegal.unexpected-character.c++",
            // "scope": "invalid.illegal.unexpected-end-of-line.c++",
            // "scope": "meta.preprocessor.diagnostic.c++",
            // "scope": "string.unquoted.c++",
            // "scope": "meta.preprocessor.include.c++",
            // "scope": "punctuation.definition.string.begin.c++",
            // "scope": "string.quoted.double.include.c++",
            // "scope": "string.quoted.other.lt-gt.include.c++",
            
        //     "foreground": "var(black)"
        // }
    ]
}